name: CI/CD avec images Docker et Docker Compose

env:
  SERVER_USER: "root"
  SERVER_PRODUCTION: "54.37.11.162"
  SERVER_STAGING: "78.138.45.88"


concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:
  # tests_frontend: 
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: checkout le code
  #     uses: actions/checkout@v4

  #   - name: installer Node.js
  #     uses: actions/setup-node@v3 
  #     with:
  #       cache: 'npm'
  #       cache-dependency-path: frontend/package-lock.json

  #   - name: installer les dépendances
  #     run: |
  #       cd frontend
  #       npm ci --cache .npm --prefer-offline

  #   - name: vérifie les vulnérabilités
  #     run: |
  #       cd frontend
  #       npm audit --audit-level=moderate
  #   - name: vérifie le code
  #     run: |
  #       cd frontend
  #       npm run lint
  #   # On pourrait lancer des tests unitaires ici

  # tests_backend:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: checkout le code
  #     uses: actions/checkout@v4

  #   - name: installer Node.js
  #     uses: actions/setup-node@v3 # défaut = LTS
  #     with:
  #       cache: 'npm'
  #       cache-dependency-path: node-api/package-lock.json

  #   - name: installer les dépendances
  #     run: |
  #       cd node-api
  #       npm ci --cache .npm --prefer-offline
          
  #   - name: exécute les tests
  #     run: |
  #       cd node-api
  #       npm run test:ci
          
  #   - name: vérifie le code
  #     run: |
  #       cd node-api
  #       npm run lint
          
  #   - name: vérifie les vulnérabilités
  #     run: |
  #       cd node-api
  #       npm audit --audit-level=moderate

  #   - name: Upload du rapport de couverture sur Codecov
  #     uses: codecov/codecov-action@v3
  #     env:
  #       CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # build:
  #   needs: [tests_frontend, tests_backend]
  #   runs-on: ubuntu-latest
  #   permissions:
  #     packages: write
  #   strategy:
  #     matrix:
  #       path: ['frontend', 'node-api']
  #       include:
  #         - path: 'frontend'
  #           full_image_name: ghcr.io/${{ github.repository }}/frontend
  #         - path: 'node-api'
  #           full_image_name: ghcr.io/${{ github.repository }}/node-api
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Mise en place de Buildx
  #       uses: docker/setup-buildx-action@v3
      
  #     - name: Login sur GitHub Package Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Récupération des métadonnées
  #       id: metadata
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ matrix.full_image_name }}

  #     - name: Build et push
  #       uses: docker/build-push-action@v5
  #       with:
  #         push: true
  #         tags: ${{ matrix.full_image_name }}:latest
  #         context: ./${{ matrix.path }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  # e2e:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Login sur GitHub Package Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Lancement des tests E2E
  #       run: |
  #         docker compose up --exit-code-from cypress --abort-on-container-exit
  #     - name: Nettoyage
  #       run: |
  #         docker compose down -v --remove-orphans

  deploy_staging:
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: http://${{ env.SERVER_STAGING }}
    steps:
    - name: checkout le code
      uses: actions/checkout@v4

    - name: déployer sur le serveur de préproduction
      run: |
        eval $(ssh-agent -s)
        ssh-add - <<< "${{ secrets.OVH_STAGING_PKEY }}"
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.SERVER_STAGING }} >> ~/.ssh/known_hosts
        scp -r docker-compose.prod.yml ${{ env.SERVER_USER }}@${{ env.SERVER_STAGING }}:/var/www/docker-compose.prod.yml
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_STAGING }} "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} &&
          docker compose -f /var/www/docker-compose.prod.yml up -d --force-recreate"

  deploy_production:
    runs-on: ubuntu-latest
    needs: [deploy_staging]
    environment:
      name: production
      url: http://${{ env.SERVER_PRODUCTION }}
    steps:
    - name: checkout le code
      uses: actions/checkout@v4

    - name: déployer sur le serveur de production
      run: |
        eval $(ssh-agent -s)
        ssh-add - <<< "${{ secrets.OVH_PROD_PKEY }}"
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.SERVER_PRODUCTION }} >> ~/.ssh/known_hosts
        scp -r docker-compose.prod.yml ${{ env.SERVER_USER }}@${{ env.SERVER_PRODUCTION }}:/var/www/docker-compose.prod.yml
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_PRODUCTION }} "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} &&
          docker compose -f /var/www/docker-compose.prod.yml up -d --force-recreate"